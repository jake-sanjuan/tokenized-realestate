// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AgentApproved extends ethereum.Event {
  get params(): AgentApproved__Params {
    return new AgentApproved__Params(this);
  }
}

export class AgentApproved__Params {
  _event: AgentApproved;

  constructor(event: AgentApproved) {
    this._event = event;
  }

  get newAgentApproved(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AgentApprovedProperty extends ethereum.Event {
  get params(): AgentApprovedProperty__Params {
    return new AgentApprovedProperty__Params(this);
  }
}

export class AgentApprovedProperty__Params {
  _event: AgentApprovedProperty;

  constructor(event: AgentApprovedProperty) {
    this._event = event;
  }

  get agent(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get propertyOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ChainlinkCancelled extends ethereum.Event {
  get params(): ChainlinkCancelled__Params {
    return new ChainlinkCancelled__Params(this);
  }
}

export class ChainlinkCancelled__Params {
  _event: ChainlinkCancelled;

  constructor(event: ChainlinkCancelled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ChainlinkFulfilled extends ethereum.Event {
  get params(): ChainlinkFulfilled__Params {
    return new ChainlinkFulfilled__Params(this);
  }
}

export class ChainlinkFulfilled__Params {
  _event: ChainlinkFulfilled;

  constructor(event: ChainlinkFulfilled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ChainlinkRequested extends ethereum.Event {
  get params(): ChainlinkRequested__Params {
    return new ChainlinkRequested__Params(this);
  }
}

export class ChainlinkRequested__Params {
  _event: ChainlinkRequested;

  constructor(event: ChainlinkRequested) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class LicenseRevoked extends ethereum.Event {
  get params(): LicenseRevoked__Params {
    return new LicenseRevoked__Params(this);
  }
}

export class LicenseRevoked__Params {
  _event: LicenseRevoked;

  constructor(event: LicenseRevoked) {
    this._event = event;
  }

  get revokedLicenseAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnerApproved extends ethereum.Event {
  get params(): OwnerApproved__Params {
    return new OwnerApproved__Params(this);
  }
}

export class OwnerApproved__Params {
  _event: OwnerApproved;

  constructor(event: OwnerApproved) {
    this._event = event;
  }

  get newOwnerApproved(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentRecieved extends ethereum.Event {
  get params(): PaymentRecieved__Params {
    return new PaymentRecieved__Params(this);
  }
}

export class PaymentRecieved__Params {
  _event: PaymentRecieved;

  constructor(event: PaymentRecieved) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paymentAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PropertyPriceChanged extends ethereum.Event {
  get params(): PropertyPriceChanged__Params {
    return new PropertyPriceChanged__Params(this);
  }
}

export class PropertyPriceChanged__Params {
  _event: PropertyPriceChanged;

  constructor(event: PropertyPriceChanged) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PropertyRegistered extends ethereum.Event {
  get params(): PropertyRegistered__Params {
    return new PropertyRegistered__Params(this);
  }
}

export class PropertyRegistered__Params {
  _event: PropertyRegistered;

  constructor(event: PropertyRegistered) {
    this._event = event;
  }

  get registeringAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get originalPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SaleApproved extends ethereum.Event {
  get params(): SaleApproved__Params {
    return new SaleApproved__Params(this);
  }
}

export class SaleApproved__Params {
  _event: SaleApproved;

  constructor(event: SaleApproved) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Tokenizer__awaitingApprovalResult {
  value0: Bytes;
  value1: Bytes;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: boolean;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class Tokenizer extends ethereum.SmartContract {
  static bind(address: Address): Tokenizer {
    return new Tokenizer("Tokenizer", address);
  }

  approveProperty(_propertyOwner: Address): BigInt {
    let result = super.call(
      "approveProperty",
      "approveProperty(address):(uint256)",
      [ethereum.Value.fromAddress(_propertyOwner)]
    );

    return result[0].toBigInt();
  }

  try_approveProperty(_propertyOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "approveProperty",
      "approveProperty(address):(uint256)",
      [ethereum.Value.fromAddress(_propertyOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approved(param0: Address): boolean {
    let result = super.call("approved", "approved(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_approved(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("approved", "approved(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  awaitingApproval(param0: Address): Tokenizer__awaitingApprovalResult {
    let result = super.call(
      "awaitingApproval",
      "awaitingApproval(address):(bytes32,bytes32,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Tokenizer__awaitingApprovalResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBoolean()
    );
  }

  try_awaitingApproval(
    param0: Address
  ): ethereum.CallResult<Tokenizer__awaitingApprovalResult> {
    let result = super.tryCall(
      "awaitingApproval",
      "awaitingApproval(address):(bytes32,bytes32,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Tokenizer__awaitingApprovalResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBoolean()
      )
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  homeValueEthToUsd(_tokenId: BigInt, propertyOwner: Address): BigInt {
    let result = super.call(
      "homeValueEthToUsd",
      "homeValueEthToUsd(uint256,address):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(propertyOwner)
      ]
    );

    return result[0].toBigInt();
  }

  try_homeValueEthToUsd(
    _tokenId: BigInt,
    propertyOwner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "homeValueEthToUsd",
      "homeValueEthToUsd(uint256,address):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(propertyOwner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  jobId(): Bytes {
    let result = super.call("jobId", "jobId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_jobId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("jobId", "jobId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  licensed(param0: Address): boolean {
    let result = super.call("licensed", "licensed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_licensed(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("licensed", "licensed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  newOwner(param0: Address): boolean {
    let result = super.call("newOwner", "newOwner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_newOwner(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("newOwner", "newOwner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numAgentApprovals(param0: Address): BigInt {
    let result = super.call(
      "numAgentApprovals",
      "numAgentApprovals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_numAgentApprovals(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numAgentApprovals",
      "numAgentApprovals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(param0: Address): boolean {
    let result = super.call("owner", "owner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_owner(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("owner", "owner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registeringAgent(param0: Address): Address {
    let result = super.call(
      "registeringAgent",
      "registeringAgent(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_registeringAgent(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "registeringAgent",
      "registeringAgent(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenId(): BigInt {
    let result = super.call("tokenId", "tokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenId", "tokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AgentApprovalCall extends ethereum.Call {
  get inputs(): AgentApprovalCall__Inputs {
    return new AgentApprovalCall__Inputs(this);
  }

  get outputs(): AgentApprovalCall__Outputs {
    return new AgentApprovalCall__Outputs(this);
  }
}

export class AgentApprovalCall__Inputs {
  _call: AgentApprovalCall;

  constructor(call: AgentApprovalCall) {
    this._call = call;
  }

  get toBeApproved(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AgentApprovalCall__Outputs {
  _call: AgentApprovalCall;

  constructor(call: AgentApprovalCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ApproveForSaleByOwnerCall extends ethereum.Call {
  get inputs(): ApproveForSaleByOwnerCall__Inputs {
    return new ApproveForSaleByOwnerCall__Inputs(this);
  }

  get outputs(): ApproveForSaleByOwnerCall__Outputs {
    return new ApproveForSaleByOwnerCall__Outputs(this);
  }
}

export class ApproveForSaleByOwnerCall__Inputs {
  _call: ApproveForSaleByOwnerCall;

  constructor(call: ApproveForSaleByOwnerCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ApproveForSaleByOwnerCall__Outputs {
  _call: ApproveForSaleByOwnerCall;

  constructor(call: ApproveForSaleByOwnerCall) {
    this._call = call;
  }
}

export class ApproveLicenseCall extends ethereum.Call {
  get inputs(): ApproveLicenseCall__Inputs {
    return new ApproveLicenseCall__Inputs(this);
  }

  get outputs(): ApproveLicenseCall__Outputs {
    return new ApproveLicenseCall__Outputs(this);
  }
}

export class ApproveLicenseCall__Inputs {
  _call: ApproveLicenseCall;

  constructor(call: ApproveLicenseCall) {
    this._call = call;
  }

  get _potentialAgent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveLicenseCall__Outputs {
  _call: ApproveLicenseCall;

  constructor(call: ApproveLicenseCall) {
    this._call = call;
  }
}

export class ApprovePropertyCall extends ethereum.Call {
  get inputs(): ApprovePropertyCall__Inputs {
    return new ApprovePropertyCall__Inputs(this);
  }

  get outputs(): ApprovePropertyCall__Outputs {
    return new ApprovePropertyCall__Outputs(this);
  }
}

export class ApprovePropertyCall__Inputs {
  _call: ApprovePropertyCall;

  constructor(call: ApprovePropertyCall) {
    this._call = call;
  }

  get _propertyOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApprovePropertyCall__Outputs {
  _call: ApprovePropertyCall;

  constructor(call: ApprovePropertyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApprovePropertyOwnerCall extends ethereum.Call {
  get inputs(): ApprovePropertyOwnerCall__Inputs {
    return new ApprovePropertyOwnerCall__Inputs(this);
  }

  get outputs(): ApprovePropertyOwnerCall__Outputs {
    return new ApprovePropertyOwnerCall__Outputs(this);
  }
}

export class ApprovePropertyOwnerCall__Inputs {
  _call: ApprovePropertyOwnerCall;

  constructor(call: ApprovePropertyOwnerCall) {
    this._call = call;
  }

  get _potentialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApprovePropertyOwnerCall__Outputs {
  _call: ApprovePropertyOwnerCall;

  constructor(call: ApprovePropertyOwnerCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ChangeCurrentPriceCall extends ethereum.Call {
  get inputs(): ChangeCurrentPriceCall__Inputs {
    return new ChangeCurrentPriceCall__Inputs(this);
  }

  get outputs(): ChangeCurrentPriceCall__Outputs {
    return new ChangeCurrentPriceCall__Outputs(this);
  }
}

export class ChangeCurrentPriceCall__Inputs {
  _call: ChangeCurrentPriceCall;

  constructor(call: ChangeCurrentPriceCall) {
    this._call = call;
  }

  get propertyOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChangeCurrentPriceCall__Outputs {
  _call: ChangeCurrentPriceCall;

  constructor(call: ChangeCurrentPriceCall) {
    this._call = call;
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get newOwnerName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get salt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }
}

export class FulfillCall extends ethereum.Call {
  get inputs(): FulfillCall__Inputs {
    return new FulfillCall__Inputs(this);
  }

  get outputs(): FulfillCall__Outputs {
    return new FulfillCall__Outputs(this);
  }
}

export class FulfillCall__Inputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get _requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get response(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class FulfillCall__Outputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }
}

export class MintPropertyCall extends ethereum.Call {
  get inputs(): MintPropertyCall__Inputs {
    return new MintPropertyCall__Inputs(this);
  }

  get outputs(): MintPropertyCall__Outputs {
    return new MintPropertyCall__Outputs(this);
  }
}

export class MintPropertyCall__Inputs {
  _call: MintPropertyCall;

  constructor(call: MintPropertyCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _propertyOwner(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _propertyAddress(): string {
    return this._call.inputValues[2].value.toString();
  }

  get salt(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintPropertyCall__Outputs {
  _call: MintPropertyCall;

  constructor(call: MintPropertyCall) {
    this._call = call;
  }
}

export class PaymentCall extends ethereum.Call {
  get inputs(): PaymentCall__Inputs {
    return new PaymentCall__Inputs(this);
  }

  get outputs(): PaymentCall__Outputs {
    return new PaymentCall__Outputs(this);
  }
}

export class PaymentCall__Inputs {
  _call: PaymentCall;

  constructor(call: PaymentCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get propertyOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PaymentCall__Outputs {
  _call: PaymentCall;

  constructor(call: PaymentCall) {
    this._call = call;
  }
}

export class RegisterPropertyCall extends ethereum.Call {
  get inputs(): RegisterPropertyCall__Inputs {
    return new RegisterPropertyCall__Inputs(this);
  }

  get outputs(): RegisterPropertyCall__Outputs {
    return new RegisterPropertyCall__Outputs(this);
  }
}

export class RegisterPropertyCall__Inputs {
  _call: RegisterPropertyCall;

  constructor(call: RegisterPropertyCall) {
    this._call = call;
  }

  get _propertyOwner(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _propertyAddress(): string {
    return this._call.inputValues[1].value.toString();
  }

  get salt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _currentPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RegisterPropertyCall__Outputs {
  _call: RegisterPropertyCall;

  constructor(call: RegisterPropertyCall) {
    this._call = call;
  }
}

export class RevokeLicenseCall extends ethereum.Call {
  get inputs(): RevokeLicenseCall__Inputs {
    return new RevokeLicenseCall__Inputs(this);
  }

  get outputs(): RevokeLicenseCall__Outputs {
    return new RevokeLicenseCall__Outputs(this);
  }
}

export class RevokeLicenseCall__Inputs {
  _call: RevokeLicenseCall;

  constructor(call: RevokeLicenseCall) {
    this._call = call;
  }
}

export class RevokeLicenseCall__Outputs {
  _call: RevokeLicenseCall;

  constructor(call: RevokeLicenseCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SellCall extends ethereum.Call {
  get inputs(): SellCall__Inputs {
    return new SellCall__Inputs(this);
  }

  get outputs(): SellCall__Outputs {
    return new SellCall__Outputs(this);
  }
}

export class SellCall__Inputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SellCall__Outputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
