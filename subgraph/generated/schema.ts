// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Owner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Owner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Owner", id.toString(), this);
  }

  static load(id: string): Owner | null {
    return store.get("Owner", id) as Owner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownedProperties(): Array<string> | null {
    let value = this.get("ownedProperties");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ownedProperties(value: Array<string> | null) {
    if (value === null) {
      this.unset("ownedProperties");
    } else {
      this.set(
        "ownedProperties",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }
}

export class Agent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Agent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Agent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Agent", id.toString(), this);
  }

  static load(id: string): Agent | null {
    return store.get("Agent", id) as Agent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Property extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Property entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Property entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Property", id.toString(), this);
  }

  static load(id: string): Property | null {
    return store.get("Property", id) as Property | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get propertyOwner(): string {
    let value = this.get("propertyOwner");
    return value.toString();
  }

  set propertyOwner(value: string) {
    this.set("propertyOwner", Value.fromString(value));
  }

  get currentPrice(): BigInt {
    let value = this.get("currentPrice");
    return value.toBigInt();
  }

  set currentPrice(value: BigInt) {
    this.set("currentPrice", Value.fromBigInt(value));
  }

  get agent(): string | null {
    let value = this.get("agent");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set agent(value: string | null) {
    if (value === null) {
      this.unset("agent");
    } else {
      this.set("agent", Value.fromString(value as string));
    }
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}
